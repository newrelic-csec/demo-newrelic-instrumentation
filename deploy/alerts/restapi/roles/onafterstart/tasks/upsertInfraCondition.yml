---

# This play require the following variable set
#   newrelic_infra_collector_url: the http URL of the newrelic Infrastructure REST API endpoint
#   newrelic_personal_api_key: "<from user config newrelic credential>"
#   policy_id: the policy id
#   application_id: The application_id of the apm service (integer)
#   metric_name: the condition name, use for display
#   metric_type: the type of the apm metric to set a condition for
#   metric_duration: the duration before starting to alert
#   metric_operator: either 'above' or 'below' to parameterize the evaluation against the threshold value
#   metric_threshold: the threshold for the condition

- name: Get existing conditions
  shell: "curl -X GET '{{ newrelic_infra_collector_url }}/v2/alerts/conditions?policy_id={{ policy_id }}' \
     -H 'Api-Key:{{ newrelic_personal_api_key }}' -H 'Auth-Type:User-Api-Key' \
     -L"
  register: existing_conditions

- set_fact: 
    condition_id: "{{ existing_conditions.stdout | from_json | json_query(query) }}"
  vars:
    query: "data[?contains(where_clause, '{{ application_id }}') && contains(where_clause, '`applicationId` =') && name=='{{ metric_name }}'] | [0].id"

- debug:
    msg: "No existing condition found for {{ metric_name }}"
  when: condition_id is not defined

- name: Prepare URL for creating
  set_fact:
    curl_command: "-X POST '{{ newrelic_infra_collector_url }}/v2/alerts/conditions'"
    curl_data: "{
  'data': {
    'type': 'infra_metric',
    'name': '{{ metric_name }}',
    'enabled': true,
    'where_clause': \"(`applicationId` = '{{ application_id }}')\",
    'policy_id': {{ policy_id }},
    'event_type': 'SystemSample',
    'select_value': '{{ metric_select_value }}',
    'comparison': '{{ metric_operator }}',
    'critical_threshold': {
      'value': {{ metric_threshold }},
      'duration_minutes': {{ metric_duration }},
      'time_function': 'all'
    }
  }
}"

- name: Prepare URL for updating
  set_fact:
    curl_command: "-X PUT '{{ newrelic_infra_collector_url }}/v2/alerts/conditions/{{ condition_id }}'"
    curl_data: "{{ curl_data | combine({
          'data': {
              'id': condition_id | int
          }
        }, recursive=True) }}"
  when: condition_id

- debug:
    msg: "data is :{{curl_data}}"

- name: Create condition
  shell: "curl {{ curl_command }} \
     -H 'Api-Key:{{ newrelic_personal_api_key }}' -H 'Auth-Type:User-Api-Key' \
     -L -H 'Content-Type: application/json' \
     -d \
'{{ curl_data | to_json }}'"
