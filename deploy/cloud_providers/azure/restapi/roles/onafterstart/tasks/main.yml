---

# This play require the following variable set
#   newrelic_personal_api_key: "<from user config newrelic credential>"
#   azure_subscription_id: the Azure subscription id
#   azure_tenant: the Azure tenant id
#   azure_client_id: the Azure client id (also named application id)
#   azure_secret: the Azure secret

# Additional optional fields:
#   newrelic_api_url: the URL for the newrelic REST API, default to main us URL
#   azure_integration_name: the azure integration name, otherwise default to "NewRelic Azure integration {{ deployment_name }}"

# Testing with EU
# - set_fact:
#     newrelic_api_url: "api.eu.newrelic.com"

- debug:
    msg: "Deploying Azure cloud provider integration"

# NewRelic required field
- fail:
    msg: "A newrelic nrPersonalApiKey is required. Create this entry in your user config file"
  when: newrelic_personal_api_key is not defined

# Azure required fields
- fail:
    msg: "A azure_subscription_id is required. Create this entry in your user config file"
  when: azure_subscription_id is not defined
- fail:
    msg: "A azure_tenant is required. Create this entry in your user config file"
  when: azure_tenant is not defined
- fail:
    msg: "A azure_client_id is required. Create this entry in your user config file"
  when: azure_client_id is not defined
- fail:
    msg: "A azure_secret is required. Create this entry in your user config file"
  when: azure_secret is not defined

- name: Set default newrelic api url
  set_fact:
    newrelic_api_url: "api.newrelic.com"
  when: newrelic_api_url is undefined
- name: Ensure https api url
  set_fact:
    newrelic_api_url: "https://{{ newrelic_api_url }}"
  when: not newrelic_api_url | regex_search('^https', ignorecase=True)

- debug:
    msg: "Using newrelic_api_url:{{ newrelic_api_url }}"

- name: Set default integration name using deployment_name:{{ deployment_name }}
  set_fact:
    azure_integration_name: "NewRelic Azure integration {{ deployment_name }}"
  when: azure_integration_name is undefined

# Find existing integration
- block:
  - name: Create payload
    template:
      src: ../../templates/find_integration_id.source.gql
      dest: "{{ playbook_dir }}/find_integration_id.gql"
  - name: Prepare POST payload for graphql
    set_fact:
      gql_content: "{{ lookup('file', '{{playbook_dir}}/find_integration_id.gql') | replace('\n', ' ') }}"
  - name: Create payload file
    template:
      src: ../../templates/gql_query.source.json
      dest: "{{ playbook_dir }}/gql_query.json"
  - name: Execute query
    shell: "curl -X POST '{{ newrelic_api_url }}/graphql' \
      -H 'Api-Key:{{ newrelic_personal_api_key }}' \
      -L -H 'Content-Type: application/json' \
      -d @{{ playbook_dir }}/gql_query.json"
    register: output_find_integration
  - name: Parse output
    set_fact: 
      linked_account_id: "{{ output_find_integration.stdout | from_json | json_query(query) }}"
    vars:
      query: "data.actor.account.cloud.linkedAccounts[?name=='{{ azure_integration_name }}'] | [0].id"
  delegate_to: localhost

# Create integration
- block:
  - name: Create payload
    template:
      src: ../../templates/create_azure_integration.source.gql
      dest: "{{ playbook_dir }}/create_azure_integration.gql"
  - name: Prepare POST payload for graphql
    set_fact:
      gql_content: "{{ lookup('file', '{{playbook_dir}}/create_azure_integration.gql') | replace('\n', ' ') }}"
  - name: Create payload file
    template:
      src: ../../templates/gql_query.source.json
      dest: "{{ playbook_dir }}/gql_query.json"
  - name: Create integration
    shell: "curl -X POST '{{ newrelic_api_url }}/graphql' \
      -H 'Api-Key:{{ newrelic_personal_api_key }}' \
      -L -H 'Content-Type: application/json' \
      -d @{{ playbook_dir }}/gql_query.json"
    register: output_create_integration
  - name: Parse linked_account_id
    set_fact: 
      linked_account_id: "{{ output_create_integration.stdout | from_json | json_query(query) }}"
    vars:
      query: "data.cloudLinkAccount.linkedAccounts[?name=='{{ azure_integration_name }}'] | [0].id"
  when: not linked_account_id
  delegate_to: localhost

# Configure specific cloud integrations
- block:
  - name: Create payload
    template:
      src: ../../templates/configure_azure_integration.source.gql
      dest: "{{ playbook_dir }}/configure_azure_integration.gql"
  - name: Prepare POST payload for graphql
    set_fact:
      gql_content: "{{ lookup('file', '{{playbook_dir}}/configure_azure_integration.gql') | replace('\n', ' ') }}"
  - name: Create payload file
    template:
      src: ../../templates/gql_query.source.json
      dest: "{{ playbook_dir }}/gql_query.json"
  - name: Configure integration
    shell: "curl -X POST '{{ newrelic_api_url }}/graphql' \
      -H 'Api-Key:{{ newrelic_personal_api_key }}' \
      -L -H 'Content-Type: application/json' \
      -d @{{ playbook_dir }}/gql_query.json"
    register: output_configure_integration
  when: linked_account_id
