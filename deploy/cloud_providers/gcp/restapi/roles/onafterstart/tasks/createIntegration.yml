---

# Create integration
- name: Create payload
  template:
    src: ../../templates/create_gcp_integration.source.gql
    dest: "{{ playbook_dir }}/create_gcp_integration.gql"
  delegate_to: localhost
- name: Prepare POST payload for graphql
  set_fact:
    gql_content: "{{ lookup('file', '{{playbook_dir}}/create_gcp_integration.gql') | replace('\n', ' ') }}"
- name: Create payload file
  template:
    src: ../../templates/gql_query.source.json
    dest: "{{ playbook_dir }}/gql_query.json"
  delegate_to: localhost
- name: Create integration
  shell: "curl -X POST '{{ newrelic_api_url }}/graphql' \
    -H 'Api-Key:{{ newrelic_personal_api_key }}' \
    -L -H 'Content-Type: application/json' \
    -d @{{ playbook_dir }}/gql_query.json"
  register: output_create_integration
  delegate_to: localhost

- name: Output
  debug:
    msg: "output_create_integration:{{output_create_integration}}"
- name: Parse authLabel
  set_fact: 
    authLabel: "{{ output_create_integration.stdout | from_json | json_query(query) }}"
  vars:
    query: "data.cloudLinkAccount.linkedAccounts[?name=='{{ gcp_integration_name }}'] | [0].authLabel"
- name: Output
  debug:
    msg: "authLabel:{{authLabel}}"

- block:
  - name: create infra config file
    template:
      src: ../../templates/create_iam_member.source.tf
      dest: "{{ playbook_dir }}/main.tf"

  - name: "Initialize terraform"
    shell: "terraform init"

  - name: "Execute terraform apply"
    shell: "terraform apply -auto-approve"
  when: authLabel is defined and authLabel != ""

