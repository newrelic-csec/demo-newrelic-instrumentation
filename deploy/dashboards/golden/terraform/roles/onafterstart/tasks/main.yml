---

# This play require the following variable set
#   newrelic_personal_api_key: "<from user config newrelic credential>"
#   newrelic_account_id: "<from user config newrelic credential>"
#   newrelic_region: "<from user config newrelic credential>"
# The fields below are optional and can be set through the deploy config params
#   s3_bucketname_tfstate: "<an AWS S3 bucket name to use for the terraform state file>"
# Other optional fields:
#   aws_access_key: the aws api key when an S3 bucket is used
#   aws_secret_key: the aws secret key when an S3 bucket is used
#   aws_region: the aws region key when an S3 bucket is used

- debug:
    msg: "Deploying dashboard for {{ deployment_name }} using Terraform"

- fail:
    msg: "A newrelic nrPersonalApiKey is required. Create this entry in your user config file"
  when: newrelic_personal_api_key is not defined
- fail:
    msg: "A newrelic accountId is required. Create this entry in your user config file"
  when: newrelic_account_id is not defined
- fail:
    msg: "A newrelic nrRegion is required. Create this entry in your user config file"
  when: newrelic_region is not defined
- fail:
    msg: "The S3 bucket name '{{ s3_bucketname_tfstate }}' requires the addition of 'provider_credential': 'aws' in your deploy config file to use the aws credentials to access the bucket."
  when: s3_bucketname_tfstate is defined and aws_secret_key is not defined

- block:
  - name: Creating terraform var file
    set_fact:
      tfvars_json: "{{ (tfvars_json|default({})) | combine({
        'newrelic_api_key': newrelic_personal_api_key,
        'newrelic_account_id': newrelic_account_id,
        'newrelic_region': newrelic_region,
        'deployment_name': deployment_name
        })
      }}"

  - name: "write terraform var to file {{playbook_dir}}/tfvars.json"
    copy:
      content: "{{ tfvars_json | to_nice_json }}"
      dest: "{{ playbook_dir }}/tfvars.json"

  - name: create infra config file
    template:
      src: ../../templates/main.tf
      dest: "{{ playbook_dir }}/main.tf"

  - name: "Initialize terraform"
    shell: "terraform init"

  - name: "Execute terraform apply"
    shell: "terraform apply -auto-approve -var-file={{ playbook_dir }}/tfvars.json"
    register: terraform_result
    retries: 8
    delay: 15
    until: terraform_result is not failed

  delegate_to: localhost

